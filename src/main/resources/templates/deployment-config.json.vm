{
  "kind": "DeploymentConfig",
  "apiVersion": "v1",
  "metadata": {
    "annotations": {
      #if(${aac.deploy.releaseTo} && "$!{aac.deploy.releaseTo}" != "")
        "boober.skatteetaten.no/releaseTo": "${aac.deploy.releaseTo}",
      #end
      "boober.skatteetaten.no/applicationFile": "${aac.deploy.applicationFile}",
      #if("$!{overrides}" != "{}")
        "boober.skatteetaten.no/overrides": "${overrides}",
      #end
      #if(${aac.deploy.managementPath} && "$!{aac.deploy.managementPath}" != "")
        "console.skatteetaten.no/management-path": "${aac.deploy.managementPath}",
      #end
      "console.skatteetaten.no/alarm": "${aac.deploy.flags.alarm}"
      #if(${aac.deploy.certificateCn})
      ,
        "sprocket.sits.no/deployment-config.certificate": "${aac.deploy.certificateCn}"
      #end
      #if("${database}" != "")
      ,
        "sprocket.sits.no/deployment-config.database": "${database}"
      #end
    },
    "labels": {
      "app": "${aac.name}",
      "updatedBy": "${username}",
      "affiliation": "${aac.affiliation}",
      "booberDeployId": "${deployId}"
    },
    "name": "${aac.name}"
  },
  "spec": {
    #if(${aac.deploy.flags.rolling})
      "strategy": {
        "type": "Rolling",
        "rollingParams": {
          "intervalSeconds": 1,
          "maxSurge": "25%",
          "maxUnavailable": 0,
          "timeoutSeconds": 120,
          "updatePeriodSeconds": 1
        }
      },
    #else
      "strategy": {
        "type": "Recreate",
        "resources": {}
      },
    #end
    "triggers": [
      {
        "type": "ImageChange",
        "imageChangeParams": {
          "automatic": true,
          "containerNames": [
            "${aac.name}"
          ],
          "from": {
            #if(${aac.type} == "development")
              "name": "${aac.name}:latest",
            #else
              "name": "${aac.name}:default",
            #end
            "kind": "ImageStreamTag"
          }
        }
      }
    ],
    "replicas": ${aac.deploy.replicas},
    "selector": {
      "name": "${aac.name}"
    },
    "template": {
      "metadata": {
        "labels": {
          #if ("$!{aac.deploy.releaseTo}" != "")
            "deployTag": "${aac.deploy.releaseTo}",
          #else
            "deployTag": "${aac.deploy.version}",
          #end
          "name": "${aac.name}",
          "app": "${aac.name}",
          "updatedBy": "${username}",
          "affiliation": "${aac.affiliation}",
          "booberDeployId": "${deployId}"
        }
      },
      "spec": {
        "volumes": [
          #if (${aac.deploy.database})
            #foreach ($db  in $aac.deploy.database)
              {
                "name": "$db.dbName",
                "secret": {
                  "secretName": "$db.dbName"
                }
              },
            #end
          #end
          #if (${mounts})
            #foreach ($mount in $mounts)
              {
                "name": "${mount.mountName}",
                #if(${mount.type} == "ConfigMap")
                  "configMap": {
                    "name": "${mount.volumeName}"
                  }
                #elseif(${mount.type} == "Secret")
                  "secret": {
                    "secretName": "${mount.volumeName}"
                  }
                #end
              },
            #end
          #end
          {
            "name": "application-log-volume",
            "emptyDir": {}
          }
          #if(${aac.volume.config.size()} != 0)
          ,
            {
              "name": "config",
              "configMap": {
                "name": "${aac.name}"
              }
            }
          #end
          #if(${aac.volume.secrets})
          ,
            {
              "name": "secrets",
              "secret": {
                "secretName": "${aac.name}"
              }
            }
          #end

          #if(${aac.deploy.certificateCn})
          ,
            {
              "name": "${aac.name}-cert",
              "secret": {
                "secretName": "${aac.name}-cert"
              }
            }
          #end
        ],
        "containers": [
          {
            "name": "${aac.name}",
            "ports": [
              {
                "containerPort": 8080,
                "protocol": "TCP",
                "name": "http"
              },
              {
                "containerPort": 8081,
                "protocol": "TCP",
                "name": "management"
              },
              {
                "containerPort": 8778,
                "name": "jolokia"
              }
            ],
            "env": [
              {
                "name": "OPENSHIFT_CLUSTER",
                "value": "${aac.cluster}"
              },
              {
                "name": "SPLUNK_INDEX",
                "value": "${aac.deploy.splunkIndex}"
              },
              {
                "name": "POD_NAME",
                "valueFrom": {
                  "fieldRef": {
                    "apiVersion": "v1",
                    "fieldPath": "metadata.name"
                  }
                }
              },
              {
                "name": "POD_NAMESPACE",
                "valueFrom": {
                  "fieldRef": {
                    "apiVersion": "v1",
                    "fieldPath": "metadata.namespace"
                  }
                }
              },
              {
                "name": "HTTP_PORT",
                "value": "8080"
              },
              {
                "name": "MANAGEMENT_HTTP_PORT",
                "value": "8081"
              },
              {
                "name": "APP_NAME",
                "value": "${aac.name}"
              }
              #if(${aac.deploy.certificateCn})
              ,
                {
                  "name": "STS_CERTIFICATE_URL",
                  "value": "${certPath}/certificate.crt"
                },
                {
                  "name": "STS_PRIVATE_KEY_URL",
                  "value": "${certPath}/privatekey.key"
                },
                {
                  "name": "STS_KEYSTORE_DESCRIPTOR",
                  "value": "${certPath}/descriptor.properties"
                }
              #end
              #if (${aac.deploy.flags.debug})
              ,
                {
                  "name": "REMOTE_DEBUG",
                  "value": "true"
                },
                {
                  "name": "DEBUG_PORT",
                  "value": "5005"
                }
              #end

              #if (${aac.route.route.size()} !=0)
                  ,{
                    "name": "ROUTE_NAME",
                "value": "${routeName}"
                  }
                #end

              #if (${aac.deploy.database})
                #foreach ($db  in $aac.deploy.database)
                  #if($velocityCount == 1)
                  ,
                    {
                      "name": "DB",
                      "value": "${dbPath}/${db.dbName}/info"
                    },
                    {
                      "name": "DB_PROPERTIES",
                      "value": "${dbPath}/${db.dbName}/db.properties"
                    }
                  #end
                  ,
                  {
                    "name": "${db.envName}",
                    "value": "${dbPath}/${db.dbName}/info"
                  },
                  {
                    "name": "${db.envName}_PROPERTIES",
                    "value": "${dbPath}/${db.dbName}/db.properties"
                  }
                #end
              #end

              #if (${mounts})

                #foreach ($mount in $mounts)
                ,
                  {
                    "name": "VOLUME_${mount.mountName.toUpperCase().replace("-", "_")}",
                    "value": "${mount.path}"
                  }
                #end
              #end


            ],
            "resources": {
              "limits": {
                "cpu": "${aac.deploy.resources.cpu.max}",
                "memory": "${aac.deploy.resources.memory.max}"
              },
              "requests": {
                "cpu": "${aac.deploy.resources.cpu.min}",
                "memory": "${aac.deploy.resources.memory.min}"
              }
            },
            "volumeMounts": [
              #if (${aac.deploy.database})
                #foreach ($db  in $aac.deploy.database)
                  {
                    "name": "$db.dbName",
                    "mountPath": "$dbPath/$db.dbName"
                  },
                #end
              #end
              #if (${mounts})
                #foreach ($mount in $mounts)
                  {
                    "name": "${mount.mountName}",
                    "mountPath": "${mount.path}"
                  },
                #end
              #end
              {
                "name": "application-log-volume",
                "mountPath": "/u01/logs"
              }
              #if(${aac.volume.config.size()} != 0)
              ,
                {
                  "name": "config",
                  "mountPath": "/u01/config/configmap"
                }
              #end
              #if(${aac.deploy.certificateCn})
              ,
                {
                  "name": "${aac.name}-cert",
                  "mountPath": "$certPath"
                }
              #end
              #if(${aac.volume.secrets})
              ,
                {
                  "name": "secrets",
                  "mountPath": "/u01/config/secret"
                }
              #end
            ],
            "terminationMessagePath": "/dev/termination-log",
            "imagePullPolicy": "IfNotPresent",
            "capabilities": {},
            "securityContext": {
              "capabilities": {},
              "privileged": false
            },
            #if (${aac.deploy.liveness})
            "livenessProbe": {
              #if(${aac.deploy.liveness.path} && "$!{aac.deploy.liveness.path}" != "")
              "httpGet": {
                "path": "${aac.deploy.liveness.path}",
              #else
              "tcpSocket": {
              #end
              "port": ${aac.deploy.liveness.port}
            },
              "initialDelaySeconds": ${aac.deploy.liveness.delay},
              "timeoutSeconds": ${aac.deploy.liveness.timeout}
            },
            #end
            "readinessProbe": {
              #if(${aac.deploy.readiness.path} && "$!{aac.deploy.readiness.path}" != "")
              "httpGet": {
                "path": "${aac.deploy.readiness.path}",
              #else
              "tcpSocket": {

              #end
              "port": ${aac.deploy.readiness.port}
              },
              "initialDelaySeconds": ${aac.deploy.readiness.delay},
              "timeoutSeconds": ${aac.deploy.readiness.timeout}
            }
          }
        ],
        "restartPolicy": "Always",
        "dnsPolicy": "ClusterFirst"
        #if(${aac.deploy.serviceAccount})
        ,
          "serviceAccountName": "${aac.deploy.serviceAccount}"
        #end
      }
    }
  }
}
